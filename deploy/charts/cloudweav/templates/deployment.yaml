---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudweav
{{- if .Values.replicas }}
  # The annotation does not support 0 replicas, which is used in integration tests.
  annotations:
    management.cattle.io/scale-available: "{{ .Values.replicas }}"
{{- end }}
  labels:
{{ include "cloudweav.labels" . | indent 4 }}
    app.kubernetes.io/name: cloudweav
    app.kubernetes.io/component: apiserver
spec:
  selector:
    matchLabels:
{{ include "cloudweav.immutableLabels" . | indent 6 }}
      app.kubernetes.io/name: cloudweav
      app.kubernetes.io/component: apiserver
{{- if not .Values.replicas }}
  # Use this field instead of the scale-available annotation when it is 0 replicas.
  replicas: {{ .Values.replicas }}
{{- end }}
{{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
{{- end }}
  template:
    metadata:
      labels:
{{ include "cloudweav.labels" . | indent 8 }}
        app.kubernetes.io/name: cloudweav
        app.kubernetes.io/component: apiserver
      annotations:
        container.apparmor.security.beta.kubernetes.io/apiserver: unconfined
    spec:
      serviceAccountName: cloudweav
      affinity:
{{ include "cloudweav.apiAffinity" (dict "root" . "component" "apiserver") | indent 8 }}
      containers:
        - name: apiserver
          image: {{ .Values.containers.apiserver.image.repository }}:{{ .Values.containers.apiserver.image.tag }}
          imagePullPolicy: {{ .Values.containers.apiserver.image.imagePullPolicy }}
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
{{- if .Values.containers.apiserver.command }}
          command:
{{ toYaml .Values.containers.apiserver.command | indent 12 }}
{{- end }}
{{- if .Values.containers.apiserver.args }}
          args:
{{ toYaml .Values.containers.apiserver.args | indent 12 }}
{{- end }}
          env:
            - name: CLOUDWEAV_SERVER_HTTPS_PORT
              value: {{ .Values.service.cloudweav.httpsPort | quote }}
            - name: CLOUDWEAV_DEBUG
              value: {{ .Values.containers.apiserver.debug | quote }}
            - name: CLOUDWEAV_SERVER_HTTP_PORT
              value: {{ .Values.service.cloudweav.httpPort | quote }}
{{- if .Values.containers.apiserver.hciMode }}
            - name: HCI_MODE
              value: "true"
{{- end }}
{{- if .Values.rancherEmbedded }}
            - name: RANCHER_EMBEDDED
              value: "true"
{{- end }}
{{- if .Values.rancherURL }}
            - name: RANCHER_SERVER_URL
              value: {{  .Values.rancherURL }}
{{- end }}
{{- if .Values.enableGoCoverDir }}
            - name: GOCOVERDIR
              value: /go-cover-dir
{{- end }}
{{ include "cloudweav.supportBundleImageEnv" . | indent 12 }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
{{- if .Values.containers.apiserver.env }}
{{ toYaml .Values.containers.apiserver.env | indent 12 }}
{{- end }}
          ports:
{{- if gt (.Values.service.cloudweav.httpsPort | int) 0 }}
            - containerPort: {{ .Values.service.cloudweav.httpsPort }}
              name: https
              protocol: TCP
{{- end }}
{{- if gt (.Values.service.cloudweav.httpPort | int) 0 }}
            - containerPort: {{ .Values.service.cloudweav.httpPort }}
              name: http
              protocol: TCP
{{- end }}
            - containerPort: {{ .Values.service.cloudweav.profile }}
              name: profile
              protocol: TCP
{{- if .Values.containers.apiserver.livenessProbe }}
          livenessProbe:
{{ toYaml .Values.containers.apiserver.livenessProbe | indent 12 }}
{{- end }}
{{- if .Values.containers.apiserver.readinessProbe }}
          readinessProbe:
{{ toYaml .Values.containers.apiserver.readinessProbe | indent 12 }}
{{- end }}
{{- if .Values.containers.apiserver.resources }}
          resources:
{{ toYaml .Values.containers.apiserver.resources | indent 12 }}
{{- end }}
{{- if .Values.enableGoCoverDir }}
          volumeMounts:
          - name: go-cover-dir
            mountPath: /go-cover-dir
      volumes:
      - name: go-cover-dir
        hostPath:
          path: /usr/local/go-cover-dir/
          type: DirectoryOrCreate
{{- end }}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudweav-webhook
  annotations:
    management.cattle.io/scale-available: "{{ .Values.webhook.replicas }}"
  labels:
{{ include "cloudweav.labels" . | indent 4 }}
    app.kubernetes.io/name: cloudweav-webhook
    app.kubernetes.io/component: webhook-server
spec:
{{- if .Values.webhook.strategy }}
  strategy:
{{ toYaml .Values.webhook.strategy | indent 4 }}
{{- end }}
  selector:
    matchLabels:
{{ include "cloudweav.immutableLabels" . | indent 6 }}
      app.kubernetes.io/name: cloudweav
      app.kubernetes.io/component: webhook-server
  template:
    metadata:
      labels:
{{ include "cloudweav.labels" . | indent 8 }}
        app.kubernetes.io/name: cloudweav
        app.kubernetes.io/component: webhook-server
      annotations:
        container.apparmor.security.beta.kubernetes.io/cloudweav-webhook: unconfined
    spec:
      serviceAccountName: cloudweav
      affinity:
{{ include "cloudweav.apiAffinity" (dict "root" . "component" "webhook-server") | indent 8 }}
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/unreachable
        operator: Exists
      containers:
      - env:
        - name: CLOUDWEAV_WEBHOOK_SERVER_HTTPS_PORT
          value: {{ .Values.webhook.httpsPort | quote }}
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLOUDWEAV_DEBUG
          value: {{ .Values.webhook.debug | quote }}
        - name: CLOUDWEAV_CONTROLLER_USER_NAME
          value: {{ .Values.webhook.controllerUser | default (print "system:serviceaccount:" .Release.Namespace ":cloudweav")  | quote }}
{{- if .Values.enableGoCoverDir }}
        - name: GOCOVERDIR
          value: /go-cover-dir
{{- end }}
        image: {{ .Values.webhook.image.repository }}:{{ .Values.webhook.image.tag }}
        name: cloudweav-webhook
        args: []
        imagePullPolicy: {{ .Values.webhook.image.imagePullPolicy }}
        securityContext:
          capabilities:
            add: ["SYS_ADMIN"]
        ports:
        - name: https
          containerPort: {{ .Values.webhook.httpsPort }}
{{- if .Values.enableGoCoverDir }}
        volumeMounts:
        - name: go-cover-dir
          mountPath: /go-cover-dir
      volumes:
      - name: go-cover-dir
        hostPath:
          path: /usr/local/go-cover-dir/
          type: DirectoryOrCreate
{{- end }}
